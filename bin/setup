#!/usr/bin/env python3
import os
import sys
import shutil
from pathlib import Path
import subprocess

def check_ffmpeg():
    """Check if ffmpeg is installed"""
    if not shutil.which('ffmpeg'):
        print("ERROR: ffmpeg not found! Please install ffmpeg first.")
        print("On Ubuntu/Debian: sudo apt install ffmpeg")
        print("On macOS: brew install ffmpeg")
        print("On Windows: choco install ffmpeg")
        sys.exit(1)

def setup_nltk():
    """Download NLTK and TextBlob data to project-local directory"""
    # Configure NLTK paths
    nltk_data_dir = os.path.join('orakle', 'skills', 'sentiment', 'nltk_data')
    nltk_data_path = str(Path(nltk_data_dir).absolute())
    os.environ['NLTK_DATA'] = nltk_data_path
    
    # Import after setting path
    import nltk
    nltk.data.path = [nltk_data_path]
    from textblob.download_corpora import download_lite
    
    # Create data directory
    os.makedirs(nltk_data_path, exist_ok=True)
    print(f"Downloading NLTK data to: {nltk_data_path}")
    
    # Download required resources
    resources = [
        'brown',
        'punkt',
        'averaged_perceptron_tagger',
        'wordnet',
        'vader_lexicon'  # For sentiment analysis
    ]
    for resource in resources:
        nltk.download(resource, download_dir=nltk_data_path, quiet=True)
        print(f"Downloaded {resource}")
    
    # Download TextBlob corpora
    print("Downloading TextBlob corpora...")
    import tempfile
    old_dir = tempfile.gettempdir()
    tempfile.tempdir = nltk_data_path
    download_lite()
    tempfile.tempdir = old_dir

def setup_voice():
    """Download voice models"""
    print("\nSetting up voice components...")
    
    # Download Whisper model
    try:
        import whisper
        print("Downloading Whisper base model...")
        whisper.load_model("base")
    except Exception as e:
        print(f"Warning: Could not setup Whisper: {e}")
    
    # Download Piper voice
    voice_dir = Path("voices")
    voice_dir.mkdir(exist_ok=True)
    if not (voice_dir / "en_US-amy-medium.onnx").exists():
        print("Downloading Piper voice model...")
        subprocess.run([
            "curl", "-LO",
            "https://huggingface.co/rhasspy/piper-voices/resolve/main/en/en_US/amy/medium/en_US-amy-medium.onnx"
        ], cwd=voice_dir)

def main():
    """Run all setup steps"""
    print("Starting Ainara setup...")
    
    # Check system dependencies
    check_ffmpeg()
    
    # Setup components
    setup_nltk()
    setup_voice()
    
    print("\nSetup complete! ðŸŽ‰")

if __name__ == '__main__':
    main()
