#!/usr/bin/env python3
import os
import sys
import subprocess
import json
import shutil
from pathlib import Path

# Configure NLTK paths before importing
nltk_data_dir = os.path.join('orakle', 'skills', 'sentiment', 'nltk_data')
nltk_data_path = str(Path(nltk_data_dir).absolute())
os.environ['NLTK_DATA'] = nltk_data_path

def check_command(command):
    """Check if a command is available in the system"""
    return shutil.which(command) is not None

def setup_nltk():
    """Download NLTK and TextBlob data to project-local directory"""
    try:
        # Now import NLTK and TextBlob
        import nltk
        nltk.data.path = [nltk_data_path]  # Override default paths
        from textblob.download_corpora import download_lite

        os.makedirs(nltk_data_path, exist_ok=True)
        print(f"Downloading NLTK data to: {nltk_data_path}")

        # Download required resources
        resources = ['brown', 'punkt', 'averaged_perceptron_tagger', 'wordnet']
        for resource in resources:
            nltk.download(resource, download_dir=nltk_data_path, quiet=True)
            print(f"Downloaded {resource}")

        # Download TextBlob corpora
        print("Downloading TextBlob corpora...")
        import tempfile
        old_dir = tempfile.gettempdir()
        tempfile.tempdir = nltk_data_path
        download_lite()
        tempfile.tempdir = old_dir

        print("NLTK setup complete!")
        return True
    except Exception as e:
        print(f"Error setting up NLTK: {e}")
        return False

def parse_requirements_file():
    """Parse the requirements.txt file and return a list of required packages"""
    requirements = []
    req_file_path = Path(__file__).parent.parent / 'requirements.txt'

    if not req_file_path.exists():
        print(f"Warning: requirements.txt not found at {req_file_path}")
        return []

    with open(req_file_path, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#'):
                # Extract package name (remove version specifiers)
                package = line.split('==')[0].split('>=')[0].split('<=')[0].split('>')[0].split('<')[0].strip()
                requirements.append(package)

    return requirements

def check_python_dependencies():
    """Check if all required Python dependencies are installed"""
    # Get requirements from requirements.txt
    required_packages = parse_requirements_file()

    # Add essential packages that might not be in requirements.txt
    essential_packages = ['nltk', 'textblob', 'langchain', 'chromadb', 'sentence-transformers']
    for package in essential_packages:
        if package not in required_packages:
            required_packages.append(package)

    missing_packages = []
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_packages.append(package)

    if missing_packages:
        print("Missing Python dependencies:")
        for package in missing_packages:
            print(f"  - {package}")
        print("\nInstall them with:")
        print("pip install -r requirements.txt")
        print("# Or for just the missing packages:")
        print(f"pip install {' '.join(missing_packages)}")
        return False

    print("All required Python dependencies are installed.")
    return True

def install_python_dependencies():
    """Install Python dependencies from requirements.txt"""
    req_file_path = Path(__file__).parent.parent / 'requirements.txt'

    if not req_file_path.exists():
        print(f"Error: requirements.txt not found at {req_file_path}")
        return False

    print("Installing Python dependencies from requirements.txt...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", str(req_file_path)])
        print("Python dependencies installed successfully.")
        return True
    except subprocess.CalledProcessError as e:
        print(f"Error installing Python dependencies: {e}")
        return False

def check_external_dependencies():
    """Check if all required external dependencies are installed"""
    required_commands = ['whisper-server']

    missing_commands = []
    for command in required_commands:
        if not check_command(command):
            missing_commands.append(command)

    if missing_commands:
        print("Missing external dependencies:")
        for command in missing_commands:
            print(f"  - {command}")

        if 'whisper-server' in missing_commands:
            print("\nTo install whisper-server, follow these steps:")
            print("1. Clone the repository: git clone https://github.com/ggerganov/whisper.cpp.git")
            print("2. Build the project: cd whisper.cpp && make")
            print("3. Download a model: bash ./models/download-ggml-model.sh medium.en")
            print("4. Install the server: sudo make install")

        return False

    print("All required external dependencies are installed.")
    return True

def check_environment_variables():
    """Check if all required environment variables are set"""
    required_vars = ['OPENAI_API_KEY']  # Add other required variables

    missing_vars = []
    for var in required_vars:
        if var not in os.environ:
            missing_vars.append(var)

    if missing_vars:
        print("Missing environment variables:")
        for var in missing_vars:
            print(f"  - {var}")

        print("\nCreate a file at /tmp/ai.env with the following content:")
        for var in missing_vars:
            print(f"{var}=your_{var.lower()}_here")

        return False

    print("All required environment variables are set.")
    return True

def setup_environment():
    """Set up the complete environment for Ainara"""
    print("Setting up Ainara environment...\n")

    # Check Python dependencies
    python_deps_ok = check_python_dependencies()

    # Ask to install missing Python dependencies if needed
    if not python_deps_ok:
        response = input("\nDo you want to install missing Python dependencies? (y/n): ")
        if response.lower() == 'y':
            python_deps_ok = install_python_dependencies()

    # Check external dependencies
    external_deps_ok = check_external_dependencies()

    # Check environment variables
    env_vars_ok = check_environment_variables()

    # Setup NLTK
    nltk_ok = setup_nltk()

    # Summary
    print("\nSetup Summary:")
    print(f"Python dependencies: {'✓' if python_deps_ok else '✗'}")
    print(f"External dependencies: {'✓' if external_deps_ok else '✗'}")
    print(f"Environment variables: {'✓' if env_vars_ok else '✗'}")
    print(f"NLTK setup: {'✓' if nltk_ok else '✗'}")

    if python_deps_ok and external_deps_ok and env_vars_ok and nltk_ok:
        print("\nEnvironment setup complete! You can now run the Ainara services.")
        return True
    else:
        print("\nEnvironment setup incomplete. Please address the issues above.")
        return False

if __name__ == '__main__':
    # Parse command line arguments
    import argparse
    parser = argparse.ArgumentParser(description='Setup Ainara environment')
    parser.add_argument('--json', action='store_true', help='Output in JSON format')
    parser.add_argument('--install', action='store_true', help='Automatically install missing dependencies')
    args = parser.parse_args()

    if args.json:
        # Capture output for JSON response
        try:
            # Run checks
            python_deps_ok = check_python_dependencies()

            # Install dependencies if requested
            if not python_deps_ok and args.install:
                python_deps_ok = install_python_dependencies()

            external_deps_ok = check_external_dependencies()
            env_vars_ok = check_environment_variables()
            nltk_ok = setup_nltk()

            result = {
                "status": "success" if (python_deps_ok and external_deps_ok and env_vars_ok and nltk_ok) else "error",
                "checks": {
                    "python_dependencies": python_deps_ok,
                    "external_dependencies": external_deps_ok,
                    "environment_variables": env_vars_ok,
                    "nltk_setup": nltk_ok
                }
            }
            print(json.dumps(result))
        except Exception as e:
            print(json.dumps({"status": "error", "message": str(e)}))
    else:
        # Run the setup with normal output
        success = setup_environment()
        sys.exit(0 if success else 1)
